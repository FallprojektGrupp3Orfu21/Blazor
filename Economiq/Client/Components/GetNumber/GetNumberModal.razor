<h3>GetNumberModal</h3>
@using Economiq.Client.Service
@using Economiq.Shared.DTO
@using Economiq.Shared.Models
<style>
    .Modal {
        background-color: rgba(0,0,0,0.9);
        height: 1000vh;
        width: 100vw;
        border: 1px solid black;
        position: absolute;
        z-index: 9999;
        left: 50%;
        top: 40%;
        transform: translate(-50%, -50%);
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        border: 1px solid black;
    }

    .container {
        padding: 1em;
        width: 80%;
        margin: auto;
        background: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .Modal-Body input {
        margin-bottom: 1em;
        text-align: center;
    }
</style>  
<div class="Modal">
    <div class="container">
        <div class="Modal-Body">
            @if(PromptText.Length != 0)
            {
            <p>@PromptText</p>    
            }
            <input class="form-control" 
                   type="number"
                   min="0"
                   placeholder=@PlaceholderText 
                   value="@CurrentValue"
                   @oninput="OnvalueChanged" />
        </div>
        <div class="Modal-footer">
            <button class="btn btn-primary" @onclick="@RunCloseModal">Save</button> 
        </div>
    </div>
</div>
@code {
    /* När användaren uppdaterar värdet i inputen så ska detta slå igenom i föräldrakomponenten, ifall användaren trycker på spara så ska modalen stängas och värdet sättas 
    * 
    * 
    */
    [Parameter]
    public ExpenseDTO SavedExpense { get; set; }
    [Parameter]
    public string PlaceholderText { get; set; }
    [Parameter]
    public string PromptText { get; set; }
    [Parameter]
    public string TitleText { get; set; }
    [Parameter] 
    public EventCallback<ExpenseDTO> CloseModalFunction { get; set; }
    public int CurrentValue { get; set; } = 0;
    [Parameter]
    public EventCallback<int> ValueChanged {get; set;}

    private Task RunCloseModal()
    {
        return CloseModalFunction.InvokeAsync(SavedExpense);
    }
    private Task OnvalueChanged(ChangeEventArgs e)
    {
        var tmp = e.Value.ToString();
        if (tmp.Length != 0)
        {
            CurrentValue = int.Parse(tmp);
        }
        else
        {
            CurrentValue = 0;
        }
        return ValueChanged.InvokeAsync(CurrentValue);
    }
}
