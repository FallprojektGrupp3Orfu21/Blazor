@using Economiq.Client.Components.AddCategory
@using Economiq.Client.Components.Modals
@using Economiq.Client.Service
@using Economiq.Shared.DTO
@using Economiq.Shared.Models
@inject ExpenseService _expenseService
@inject RecipientService _recipientService
@inject ExpenseCategoryService _categoryService;
@inject BudgetService _budgetService;
<style>
    #NewCategory {
        position: absolute;
        top: 0;
        border-radius: 5px;
        right: 8px;
        z-index: 2;
        border: none;
        top: 2px;
        height: 30px;
        cursor: pointer;
        color: black;
        background-color: white;
        transform: translate(-10px, 50%);
    }
    #NewRecipient{
        position: absolute;
        top: 0;
        border-radius: 5px;
        right: 8px;
        z-index: 2;
        border: none;
        top: 2px;
        height: 30px;
        cursor: pointer;
        color: black;
        background-color: white;
        transform: translate(-10px, 50%);
    }

    .modal {
        position: absolute;
        z-index: 9999;
    }

    label, input, .form-control {
        font-weight: bold;
    }

    .no-opacity {
        opacity: 1 !important;
    }
</style>
<p>@Confirmation</p>
<EditForm Model="@NewExpense" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2 form-group form-floating">
        <InputText class="form-control" id="title" placeholder="Expense" @bind-Value="@NewExpense.Title"></InputText>
        <label for="title" class="no-opacity">Title:</label>
        <ValidationMessage For="@(() => @NewExpense.Title)" />
    </div>
    <div class="mb-2 form-group form-floating">
        <InputNumber class="form-control" id="amount" @bind-Value="@NewExpense.Amount"></InputNumber>
        <label for="amount" class="no-opacity">Amount:</label>
        <ValidationMessage For="@(() => @NewExpense.Amount)" />
    </div>

    <div class="mb-2 form-group form-floating">
        <InputDate class="form-control" id="date" @bind-Value="@CreationDate"></InputDate>
        <label for="date" class="no-opacity">Date:</label>
        <ValidationMessage For="@(() => @NewExpense.ExpenseDate)" />
    </div>

    <div class="mb-2 form-group form-floating">
        <InputSelect class="form-control" id="category" placeholder="Category" @bind-Value="@NewExpense.CategoryId">

            @foreach (ExpenseCategoryDTO category in _categoryList)
            {
                <option Value=@category.CategoryId>@category.CategoryName</option>
            }

        </InputSelect>
        <button id="NewCategory" type="button" @onclick="()=> {ChangeShowCategoryModal();}">+</button>
        <label for="category" class="no-opacity">Category:</label>
        <ValidationMessage For="@(() => @NewExpense.CategoryId)" />
    </div>



    <div class="mb-2 form-group form-floating">
        <InputSelect class="form-control" id="recipient" @bind-Value=NewExpense.RecipientId>
            @foreach (RecipientDTO recipient in _recipients)
            {
                <option Value=@recipient.Id>@recipient.Name</option>
            }
        </InputSelect>
        <button id="NewRecipient" type="button" @onclick="()=> {ChangeShowRecipientModal();}">+</button>
        <label for="recipient" class="no-opacity">Recipient:</label>
    </div>
    <button class="btn btn-primary" type="submit">Add Expense</button>
</EditForm>
@if (ShowCategoryModal)
{
    <AddCategoryModal CloseModalFunction="@ChangeShowCategoryModal"
                  SaveNewCategoryFunction="@SaveNewCategory"
                  ExpenseCategoryString="@NewExpenseCategory"
                  CategoryChanged="@CategoryChanged" />
}
@if (ShowRecipientModal)
{
    <AddRecipientModal CloseModalFunction="@ChangeShowRecipientModal"
                   SaveNewRecipientFunction="@SaveNewRecipient"
                   RecipientName="@NewRecipientName"
                   RecipientInfo="@NewRecipientInfo"
                   RecipientNameChanged="@RecipientNameChanged"
                   RecipientInfoChanged="@RecipientInfoChanged" />
}
@code {
    [Parameter]
    public EventCallback UpdateList { get; set; }
    public string Confirmation { get; set; } = String.Empty;
    private List<RecipientDTO> _recipients = new();
    public ExpenseDTO NewExpense { get; set; } = new();
    public DateOnly CreationDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    private string NewExpenseCategory { get; set; } = String.Empty;
    private string NewRecipientName { get; set; } = String.Empty;
    private string NewRecipientInfo { get; set; } = String.Empty;
    public List<ExpenseCategoryDTO> _categoryList { get; set; } = new();
    public bool ShowCategoryModal = false;
    public bool ShowRecipientModal = false;
    public void CategoryChanged(string newValue)
    {
        NewExpenseCategory = newValue;
    }
    public void RecipientNameChanged(string newValue)
    {
        NewRecipientName = newValue;
    }
    public void RecipientInfoChanged(string newValue)
    {
        NewRecipientInfo = newValue;
    }

    protected override async Task OnInitializedAsync()
    {
        _recipients = await _recipientService.GetRecipients();
        _categoryList = await _categoryService.GetCategoryList();
        NewExpense.ExpenseDate = CreationDate.ToString("yyyy-MM-dd");
        if (_recipients.Count > 0)
        {
            NewExpense.RecipientId = _recipients[0].Id;
        }
        StateHasChanged();
    }

    public void ChangeShowCategoryModal()
    {
        NewExpenseCategory = String.Empty;
        this.ShowCategoryModal = !this.ShowCategoryModal;
        StateHasChanged();
    }

    public void ChangeShowRecipientModal()
    {
        NewRecipientName = String.Empty;
        this.ShowRecipientModal = !this.ShowRecipientModal;
        StateHasChanged();
    }

    public async void SaveNewCategory()
    {
        ExpenseCategoryDTO expenseCategory = new()
            {
                CategoryName = NewExpenseCategory
            };
        var tmp = await _categoryService.CreateExpenseCategory(expenseCategory);
        if (tmp.Item1 == System.Net.HttpStatusCode.Created)
        {
            _categoryList.Add(tmp.Item2);
            NewExpense.CategoryId = tmp.Item2.CategoryId;
        }
        StateHasChanged();
    }

    public async void SaveNewRecipient()
    {
        RecipientDTO newRecipient = new()
            {
                Name = NewRecipientName,
                ExtraInfo = NewRecipientInfo
            };
        var request = await _recipientService.CreateRecipient(newRecipient);
        if (request.Item1 == System.Net.HttpStatusCode.Created)
        {
            _recipients.Add(request.Item2);
            NewExpense.CategoryId = request.Item2.Id;
        }
        StateHasChanged();
    }

    public async Task HandleSubmit()
    {
        NewExpense.ExpenseDate = CreationDate.ToString("yyyy-MM-dd");
        CreateBudgetDTO createBudgetDTO = new()
            {
                ExpenseDate = NewExpense.ExpenseDate,
                MaxAmount = 0
            };
        ListBudgetDTO relevantBudget = await _budgetService.GetBudgetByDate(createBudgetDTO);

        if (relevantBudget == null)
        {
            decimal latestMaxAmount = await _budgetService.GetLatestMaxAmount();
            //If Decimal = 0 show modal.
            //Else show modal for question about using latest one or create new one.
            createBudgetDTO.MaxAmount = latestMaxAmount;
            Guid budgetID = await _budgetService.CreateBudget(createBudgetDTO);
            NewExpense.BudgetId = budgetID;
        }
        else
        {
            NewExpense.BudgetId = relevantBudget.Id;
        }
        Confirmation = await _expenseService.CreateExpense(NewExpense);
        CreationDate = DateOnly.FromDateTime(DateTime.Now);
        NewExpense = new ExpenseDTO()
            {
                ExpenseDate = CreationDate.ToString("yyyy-MM-dd"),
                RecipientId = _recipients[0].Id
            };
        await UpdateList.InvokeAsync();
    }
}
