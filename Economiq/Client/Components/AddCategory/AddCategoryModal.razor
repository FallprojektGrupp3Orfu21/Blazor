@using Economiq.Client.Service
@using Economiq.Shared.DTO
@using Economiq.Shared.Models
<style>
    .Modal {
        background-color: rgba(0,0,0,0.9);
        height: 1000vh;
        width: 100vw; 
        border: 1px solid black;
        position: absolute; 
        z-index:9999;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        align-items: center;
        justify-content:center;
        flex-direction:column;
        border: 1px solid black;
    }
    .container {
        padding: 1em;
        width: 80%;
        margin: auto;
        background: white;
        display: flex; 
        flex-direction: column;
        justify-content: center; 
        align-items: center;
    }
    .Modal-Body input {
        margin-bottom: 1em;
        text-align: center;
    }
</style>
<div class="Modal">
    <div class="container">
    <div class="Modal-Body">
            <input class="form-control"  
                   type="text"  
                   placeholder="Add New Category" 
                   value="@currentString" @oninput="OnValueChanged" />
    </div>
    <div class="Modal-footer">
        <button class="btn btn-primary" @onclick="RunSaveNewCategory">Save</button>
        <button class="btn btn-secondary" @onclick ="@RunCloseModalFunction" >Cancel</button>
    </div>
</div>
</div>
@code {
    [Parameter]  
    public Action CloseModalFunction { get; set; } 
    [Parameter]
    public Action SaveNewCategoryFunction { get; set; }
    [Parameter]
    public String ExpenseCategoryString { get; set; }
    [Parameter] 
    public EventCallback<string> CategoryChanged { get; set; }
    private void RunCloseModalFunction(){
        CloseModalFunction?.Invoke(); 
    }
    private void RunSaveNewCategory(){
        SaveNewCategoryFunction?.Invoke();
        RunCloseModalFunction();
    }
    protected override void OnInitialized()
    {
        currentString = ExpenseCategoryString;
    }

    private String currentString { get; set; }
    private Task OnValueChanged(ChangeEventArgs e)  
       {  
           currentString = e.Value.ToString();  
           return CategoryChanged.InvokeAsync(currentString);  
       }  
   }  

 }

