@using Economiq.Client.Service
@using Economiq.Shared.DTO
@using Economiq.Shared.Models


<style>
    .Modal2 {
        background-color: rgba(255,255,255,0.8);
        height: 100vh;
        width: 100vw;
        border: 1px solid black;
        position: absolute;
        top: 0;
        right: 0;
        z-index: 9999;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        border: 1px solid black;
    }

    .Modal-Body2 input {
        margin-bottom: 1em;
        text-align: center;
    }
</style>
<div class="Modal2">
    <div class="Modal-Body2">
        <input class="form-control"
               type="number"
               placeholder="Add New Budget"
               value="@currentBudgetString" @oninput="OnValueChanged" />
    </div>
    <div class="Modal-footer">
        <button class="btn btn-primary" @onclick="RunSaveNewBudget">Save</button>
        <button class="btn btn-secondary" @onclick="@RunCloseModalFunction">Cancel</button>
    </div>
</div>

@code {
    [Parameter]
    public Action CloseModalFunction { get; set; }
    [Parameter]
    public Action SaveNewBudgetFunction { get; set; }
    [Parameter]
    public decimal ExpenseBudgetString { get; set; }
    [Parameter]
    public EventCallback<decimal> BudgetChanged { get; set; }
    private void RunCloseModalFunction()
    {
        CloseModalFunction?.Invoke();
    }
    private void RunSaveNewBudget()
    {
        SaveNewBudgetFunction?.Invoke();
        RunCloseModalFunction();
    }
    protected override void OnInitialized()
    {
        currentBudgetString = ExpenseBudgetString;
    }

    private decimal currentBudgetString { get; set; }
    private Task OnValueChanged(ChangeEventArgs e)
    {
        currentBudgetString = ExpenseBudgetString;
        return BudgetChanged.InvokeAsync(currentBudgetString);
    }
}

 }

