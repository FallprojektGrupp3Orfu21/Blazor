@using Economiq.Client.Service
@using Economiq.Shared.DTO
@using Economiq.Shared.Models

<style>
    .Modal {
        background-color: rgba(255,255,255,0.8);
        height: 100vh;
        width: 100vw; 
        border: 1px solid black;
        position: absolute; 
        top: 0;
        right: 0;
        z-index:9999;
        display: flex;
        align-items: center;
        justify-content:center;
        flex-direction:column;
        border: 1px solid black;
    }
    .Modal-Body input {
        margin-bottom: 1em;
        text-align: center;
    }
</style>
<div class="Modal">
    <div class="Modal-Body">
            <input class="form-control"  
                   type="text"  
                   placeholder="Add new maxamount" 
                   value="@currentBudgetString" @oninput="OnValueChanged" />
    </div>
    <div class="Modal-footer">
        <button class="btn btn-primary" @onclick="RunSaveNewBudgetAmount">Save</button>
        <button class="btn btn-secondary" @onclick ="@RunCloseModalFunction" >Cancel</button>
    </div>
</div>

@code {
    [Parameter]  
    public Action CloseModalFunction { get; set; } 
    [Parameter]
    public Action SaveNewBudgetFunction { get; set; }
    [Parameter]
    public String BudgetString { get; set; }
    [Parameter] 
    public EventCallback<string> BudgetChanged { get; set; }
    private void RunCloseModalFunction(){
        CloseModalFunction?.Invoke(); 
    }
    private void RunSaveNewBudgetAmount(){
        SaveNewBudgetAmount?.Invoke();
        RunCloseModalFunction();
    }
    protected override void OnInitialized()
    {
        currentBudgetString = BudgetString;
    }

    private String currentBudgetString { get; set; }
    private Task OnValueChanged(ChangeEventArgs e)  
       {  
           currentBudgetString = e.Value.ToString();  
           return CategoryChanged.InvokeAsync(currentBudgetString);  
       }  
   }  

 }

