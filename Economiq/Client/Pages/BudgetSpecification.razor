@page "/budget/{IdAsString}"
@using Economiq.Client.Components.Expense
@using Economiq.Client.Service
@using Economiq.Shared.DTO
@inject HttpClient httpClient
@inject AppState _appState
@implements IDisposable
@inject BudgetService _budgetService;
@inject ExpenseCategoryService _expenseCategoryService;
@attribute [Authorize]



@if (_budget != null)
{
<h3>@_budget.YearAndMonth</h3>
    <MudPaper Class="pa-4 border-solid border-1 border-white bg-transparent text-white">
        <MudText Typo="Typo.h5" Class="text-white">Total: @data.Sum().ToString():-</MudText>
         <MudText Typo="Typo.h6" Class="text-white">Budget: @_budget.MaxAmount</MudText>
        <MudChart ChartType="ChartType.Pie" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px">
        </MudChart>
    </MudPaper>
    <MudPaper Class="pa-4 mt-2 d-flex justify-center bg-transparent border-solid border-1 border-white text-white">
        @if (Index != -1)
        {
            <div hidden="@isShown">

                @(currentCategory = GetCurrentCategory(myId[Index]))
            </div>
            
            <CollapsableExpenseList Expenses=currentCategory.Expenses/>
        }
    </MudPaper>
}

@code {
    [Parameter]
    public string IdAsString { get; set; }
    public Guid Id { get; set; }
    private ListBudgetDTO? _budget;
    private List<CategorySumDTO>? _sum;
    private string[]? labels;
    private double[]? data;
    private int[]? myId;
    private List<ExpenseCategoryDTO>? _category;
    private ExpenseCategoryDTO currentCategory = new();
    public bool isShown = true;

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;

    protected override async Task OnInitializedAsync()
    {
        Id = Guid.Parse(IdAsString);
        _budget = await _budgetService.GetBudgetById(Id);
        _category = await _expenseCategoryService.GetCategoryList();
        _sum = await _expenseCategoryService.GetGraphInfo(Id);

        List<string> Labels = new();
        List<double> Data = new();
        List<int> Ids = new();

        foreach (var item in _sum)
        {
            Labels.Add(item.CategoryName);
            Data.Add((double)item.TotalSum);
            Ids.Add(item.CategoryId);
        }
        labels = Labels.ToArray();
        data = Data.ToArray();
        myId = Ids.ToArray();
    }

    private ExpenseCategoryDTO GetCurrentCategory(int Id)
    {
        return _category.Where(x => x.CategoryId == Id).FirstOrDefault();
    }

    public void Dispose()
    {
        _appState.OnStateChange -= StateHasChanged;
    }

    private int Index = -1;
   
}

  
