@page "/budget/{IdAsString}"
@using Economiq.Client.Components.Expense
@using Economiq.Client.Service
@using Economiq.Shared.DTO
@inject AppState _appState
@implements IDisposable
@inject BudgetService _budgetService;
@inject ExpenseCategoryService _expenseCategoryService;
@inject ExpenseService _expenseService;




@if (_budget != null)
{

    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">Budget chart</MudText>
        <MudChart ChartType="ChartType.Donut" InputData="@data" @bind-SelectedIndex="Index" InputLabels="@labels" Width="300px" Height="300px">
            <CustomGraphics>
                <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total</text>
                <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@data.Sum().ToString()</text>
            </CustomGraphics>

        </MudChart>


    </MudPaper>
    <MudPaper Class="pa-4 mt-2 d-flex justify-center">

        @if (Index != -1)
        {
            <MudText Typo="Typo.h6">@labels[Index]: @data[Index]</MudText>
            @*expensesInCategory = GetExpensesInCategory(categoryIds[Index]);
            @foreach(var expense in expensesInCategory)
            {
                <p>@expense.Amount</p>
            }*@
        }
    </MudPaper>


    <h3>@_budget.YearAndMonth</h3>
    <p>@_budget.MaxAmount</p>

    if (_budget.Expenses != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Amount</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th>Recipient</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expense in _budget.Expenses)
                {
                    <tr>
                        <td>@expense.Title</td>
                        <td>@expense.Amount</td>
                        <td>@expense.categoryName</td>
                        <td>@expense.ExpenseDate</td>
                        <td>@expense.RecipientName</td>
                    </tr>
                }
            </tbody>
        </table>
    }

}
@code {
    [Parameter]
    public string IdAsString { get; set; }
    public Guid Id { get; set; }
    private ListBudgetDTO? _budget;
    private List<CategorySumDTO>? _sum;
    private string[]? labels;
    private double[]? data;
    private int[]? categoryIds;
    private int Index = -1;
    private List<GetExpenseDTO> expensesInCategory = new();

    protected override async Task OnInitializedAsync()
    {
        Id = Guid.Parse(IdAsString);

        _budget = await _budgetService.GetBudgetById(Id);

        _sum = await _expenseCategoryService.GetGraphInfo(Id);
        List<string> Labels = new();
        List<double> Data = new();
        List<int> CategoryIds = new();

        foreach (var item in _sum)
        {
            Labels.Add(item.CategoryName);
            Data.Add((double)item.TotalSum);
            CategoryIds.Add(item.CategoryId);

        }
        labels = Labels.ToArray();
        data = Data.ToArray();
        categoryIds = CategoryIds.ToArray();
    }


    public void Dispose()
    {
        _appState.OnStateChange -= StateHasChanged;
    }

    private List<GetExpenseDTO> GetExpensesInCategory(int categoryId)
    {
        var expenses = System.Threading.Tasks.Task.Run(() => _expenseService.GetExpensesInCategoryInBudget(new BudgetAndCategoryIdDTO() { BudgetId = IdAsString, CategoryId = categoryId })).GetAwaiter().GetResult();
        return expenses;
    }

}
