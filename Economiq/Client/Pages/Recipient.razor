@page "/recipient"
@using Economiq.Client.Service
@using Economiq.Shared.DTO
@inject AppState _appState
@inject RecipientService _recipientService
@implements IDisposable
@attribute [Authorize]

<style>
    .recipient{
        color: white;
    }
</style>

<h3 class="recipient">Add Recipient</h3>
<br />
<fieldset>
<EditForm Model ="@NewRecipient" OnValidSubmit="AddRecipient">
        <DataAnnotationsValidator />
    <ValidationSummary />

        <div class="mb-2 form-group form-floating">
            <InputText class="form-control" id="name" placeholder="name" @bind-Value="@NewRecipient.Name" />
            <label for="name">Name:</label>
            <ValidationMessage For="@(() => NewRecipient.Name)" />
        </div>
        <div class="mb-2 form-group form-floating">
            <InputText class="form-control" id="ExtraInfo" placeholder="ExtraInfo" @bind-Value="@NewRecipient.ExtraInfo" />
            <label for="ExtraInfo">ExtraInfo:</label>
            <ValidationMessage For="@(()=> NewRecipient.ExtraInfo)" />
        </div>
        <div class="mb-2">
            <br />
            <button class="btn btn-primary">Add Recipient</button>
    </div>
        </EditForm>
</fieldset>
<br />
<h2 class="recipient">Recipients</h2>
<table class="table table-bordered table-striped">
    <thead>
    <tr>
        <th>Name</th>
        <th>ExtraInfo</th>
    </tr>
    </thead>
    <tbody>
@foreach(RecipientDTO recipient in recipients){
    <tr>    
     <td>@recipient.Name</td>
    <td>@recipient.ExtraInfo</td>
  </tr>
}
</tbody>
</table>

@code {
    private RecipientDTO NewRecipient = new();
    private List<RecipientDTO> recipients = new();
    private async void AddRecipient()
    {
        await _recipientService.CreateRecipient(NewRecipient);
        recipients = await _recipientService.GetRecipients();
        recipients.Reverse();
        NewRecipient.Name = String.Empty;
        NewRecipient.ExtraInfo = String.Empty;
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        recipients = await _recipientService.GetRecipients();
        recipients.Reverse();
    }
    public void Dispose()
    {
        _appState.OnStateChange -= StateHasChanged;
    }
}